{"/home/travis/build/npmtest/node-npmtest-sworm/test.js":"/* istanbul instrument in package npmtest_sworm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sworm/lib.npmtest_sworm.js":"/* istanbul instrument in package npmtest_sworm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sworm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sworm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sworm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sworm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sworm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sworm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sworm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sworm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sworm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sworm.__dirname + '/lib.npmtest_sworm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/index.js":"var crypto = require(\"crypto\");\nvar _ = require(\"underscore\");\nvar mssqlDriver = require(\"./mssqlDriver\");\nvar pgDriver = require(\"./pgDriver\");\nvar mysqlDriver = require(\"./mysqlDriver\");\nvar oracleDriver = require(\"./oracleDriver\");\nvar sqliteDriver = require(\"./sqliteDriver\");\nvar websqlDriver = require(\"./websqlDriver\");\nvar debug = require(\"debug\")(\"sworm\");\nvar debugResults = require(\"debug\")(\"sworm:results\");\nvar redactConfig = require('./redactConfig');\nvar urlUtils = require('url')\nvar unescape = require('./unescape')\n\nvar rowBase = function() {\n  function fieldsForObject(obj) {\n    return Object.keys(obj).filter(function (key) {\n      var value = obj[key];\n      return value instanceof Date\n        || unescape.isUnescape(value)\n        || value instanceof Buffer\n        || !(\n          value === null\n          || value === undefined\n          || value instanceof Object\n        );\n    });\n  }\n\n  function foreignFieldsForObject(obj) {\n    return Object.keys(obj).filter(function (key) {\n      if (/^_/.test(key) && key !== obj._meta.id) {\n        return false;\n      } else {\n        var value = obj[key];\n        return !(value instanceof Date) && !(unescape.isUnescape(value)) && !(value instanceof Buffer) && value instanceof Object;\n      }\n    });\n  }\n\n  function insertStatement(obj, keys) {\n    var fields = keys.join(', ');\n    var values = keys.map(function (key) { return '@' + key; }).join(', ');\n\n    if (!fields.length) {\n      if (obj._meta.db.driver.insertEmpty) {\n        return obj._meta.db.driver.insertEmpty(obj._meta);\n      } else {\n        return 'insert into ' + obj._meta.table + ' default values';\n      }\n    } else {\n      if (obj._meta.db.driver.insertStatement) {\n        return obj._meta.db.driver.insertStatement(obj._meta, fields, values)\n      } else {\n        return 'insert into ' + obj._meta.table + ' (' + fields + ') values (' + values + ')';\n      }\n    }\n  }\n\n  function insert(obj) {\n    return obj._meta.db.whenConnected(function () {\n      var keys = fieldsForObject(obj);\n      var statementString = insertStatement(obj, keys);\n\n      var params = _.pick(obj, keys);\n\n      if (obj._meta.db.driver.outputIdKeys && !obj._meta.compoundKey) {\n        params = _.extend(params, obj._meta.db.driver.outputIdKeys(obj._meta.idType));\n      }\n\n      return obj._meta.db.query(statementString, params, {\n        insert: !obj._meta.compoundKey,\n        statement: obj._meta.compoundKey,\n        id: obj._meta.id\n      }).then(function (result) {\n        obj.setSaved();\n\n        if (!obj._meta.compoundKey) {\n          obj[obj._meta.id] = result.id;\n        }\n\n        return obj.setNotChanged();\n      });\n    });\n  }\n\n  function update(obj) {\n    var keys = fieldsForObject(obj).filter(function (key) {\n      return key !== obj._meta.id;\n    });\n    var assignments = keys.map(function (key) {\n      return key + ' = @' + key;\n    }).join(', ');\n\n    var whereClause;\n\n    if (!obj.hasIdentity()) {\n      throw new Error(obj._meta.table + ' entity must have ' + obj._meta.id + ' to be updated');\n    }\n\n    if (obj._meta.compoundKey) {\n      keys.push.apply(keys, obj._meta.id);\n      whereClause = obj._meta.id.map(function (key) {\n        return key + ' = @' + key;\n      }).join(' and ');\n    } else {\n      keys.push(obj._meta.id);\n      whereClause = obj._meta.id + ' = @' + obj._meta.id;\n    }\n\n    var statementString = 'update ' + obj._meta.table + ' set ' + assignments + ' where ' + whereClause;\n\n    return obj._meta.db.query(statementString, _.pick(obj, keys), {statement: true}).then(function(result) {\n      if (result.changes == 0) {\n        throw new Error(obj._meta.table + ' entity with ' + obj._meta.id + ' = ' + obj.identity() + ' not found to update')\n      } else {\n        return obj.setNotChanged();\n      }\n    });\n  }\n\n  function foreignField(obj, field) {\n    var v = obj[field];\n    if (typeof v == 'function') {\n      var value = obj[field](obj);\n      if (value && !(value instanceof Array)) {\n        throw new Error('functions must return arrays of entities')\n      }\n      obj[field] = value;\n      return value;\n    } else {\n      return v;\n    }\n  }\n\n  function saveManyToOne(obj, field, options) {\n    var value = obj[field]\n\n    if (value && !(value instanceof Array || typeof value === 'function')) {\n      return value.save(options).then(function () {\n        var foreignId =\n          obj._meta.foreignKeyFor ?\n            obj._meta.foreignKeyFor(field) :\n              field + '_id';\n\n        if (!value._meta.compoundKey) {\n          obj[foreignId] = value.identity();\n        }\n      });\n    }\n  }\n\n  function saveManyToOnes(obj, options) {\n    return Promise.all(foreignFieldsForObject(obj).map(function (field) {\n      return saveManyToOne(obj, field, options);\n    }));\n  }\n\n  function saveOneToMany(obj, field, options) {\n    var items = foreignField(obj, field);\n\n    if (items instanceof Array) {\n      return Promise.all(items.map(function (item) {\n        return item.save(options);\n      }));\n    }\n  }\n\n  function saveOneToManys(obj, options) {\n    return Promise.all(foreignFieldsForObject(obj).map(function (field) {\n      return saveOneToMany(obj, field, options);\n    }));\n  }\n\n  function hash(obj) {\n    var h = crypto.createHash('md5');\n    var fields = fieldsForObject(obj).map(function (field) {\n      return [field, obj[field]];\n    });\n    h.update(JSON.stringify(fields));\n    return h.digest('hex');\n  }\n\n  return {\n    save: function(options) {\n      this._meta.db.ensureConfigured();\n\n      var self = this;\n      var forceUpdate = options && options.hasOwnProperty('update')? options.update: false;\n      var forceInsert = options && options.hasOwnProperty('insert')? options.insert: false;\n      var force = options && options.hasOwnProperty('force')? options.force: forceInsert || forceUpdate;\n\n      var waitForOneToManys;\n      var oneToManyPromises;\n\n      if (typeof options == 'object' && options.hasOwnProperty('oneToManyPromises')) {\n        waitForOneToManys = false;\n        oneToManyPromises = options.oneToManyPromises;\n      } else {\n        waitForOneToManys = true;\n        oneToManyPromises = [];\n      }\n\n      if (!self._saving) {\n        self.setSaving(saveManyToOnes(this, {oneToManyPromises: oneToManyPromises}).then(function () {\n          if (self.changed() || force) {\n            var writePromise = self.saved() || forceUpdate ? update(self) : insert(self);\n\n            return writePromise.then(function () {\n              return {\n                oneToManys: saveOneToManys(self, {oneToManyPromises: oneToManyPromises})\n              };\n            });\n          } else {\n            return {\n              oneToManys: saveOneToManys(self, {oneToManyPromises: oneToManyPromises})\n            };\n          }\n        }).then(function (value) {\n          self.setSaving(false);\n          return value;\n        }, function (error) {\n          self.setSaving(false);\n          throw error;\n        }));\n      }\n\n      oneToManyPromises.push(self._saving.then(function (r) {\n        return r.oneToManys;\n      }));\n\n      if (waitForOneToManys) {\n        return Promise.all(oneToManyPromises.concat([self._saving]))\n      } else {\n        return self._saving;\n      }\n    },\n\n    changed: function() {\n      return !this._hash || this._hash !== hash(this);\n    },\n\n    identity: function () {\n      if (this.hasIdentity()) {\n        if (this._meta.compoundKey) {\n          var self = this;\n          return this._meta.id.map(function (id) {\n            return self[id];\n          });\n        } else {\n          return this[this._meta.id];\n        }\n      }\n    },\n\n    hasIdentity: function () {\n      if (this._meta.compoundKey) {\n        var self = this;\n        return this._meta.id.every(function (id) {\n          return self.hasOwnProperty(id) && !!self[id]\n        });\n      } else {\n        return this.hasOwnProperty(this._meta.id) && !!this[this._meta.id]\n      }\n    },\n\n    saved: function() {\n      return this._saved;\n    },\n\n    setSaving: function(saving) {\n      if (saving) {\n        Object.defineProperty(this, \"_saving\", {\n          value: saving,\n          configurable: true\n        });\n      } else {\n        delete this._saving;\n      }\n    },\n\n    setNotChanged: function() {\n      if (this._hash) {\n        this._hash = hash(this);\n        return this._hash;\n      } else {\n        return Object.defineProperty(this, \"_hash\", {\n          value: hash(this),\n          writable: true\n        });\n      }\n    },\n\n    setSaved: function() {\n      if (!this._saved) {\n        return Object.defineProperty(this, \"_saved\", {\n          value: true\n        });\n      }\n    },\n\n    insert: function () {\n      return this.save({insert: true})\n    },\n\n    update: function () {\n      return this.save({update: true})\n    },\n\n    upsert: function () {\n      if (this.hasIdentity()) {\n        return this.update()\n      } else {\n        return this.insert()\n      }\n    }\n  };\n}();\n\nfunction isModelMeta(value, key) {\n  return typeof value !== 'function' || key === 'foreignKeyFor'; \n}\n\nexports.db = function(config) {\n  var db = {\n    log: config && config.log,\n    config: config,\n\n    model: function(modelConfig) {\n      var proto = _.omit(modelConfig, isModelMeta);\n      proto._meta = _.extend({\n        id: 'id'\n      }, _.pick(modelConfig, isModelMeta));\n\n      proto._meta.db = this;\n      var id = proto._meta.id;\n      proto._meta.compoundKey = id == false || id instanceof Array;\n\n      var modelPrototype = _.extend(Object.create(rowBase), proto);\n\n      function model(obj, options) {\n        var saved = typeof options == 'object' && options.hasOwnProperty('saved')? options.saved: false;\n        var modified = typeof options == 'object' && options.hasOwnProperty('modified')? options.modified: false;\n        var row = _.extend(Object.create(modelPrototype), obj);\n\n        if (saved) {\n          row.setSaved();\n          if (!modified) {\n            row.setNotChanged();\n          }\n        }\n\n        return row;\n      }\n\n      model.query = function() {\n        var self = this;\n        return db.query.apply(db, arguments).then(function (entities) {\n          return entities.map(function (e) {\n            return self(e, {saved: true});\n          });\n        });\n      };\n\n      return model;\n    },\n\n    query: function(_query, _params, _options) {\n      var self = this;\n      var queryParams = unescape.interpolate(_query, _params)\n      var query = queryParams.query\n      var params = queryParams.params\n      var options = _options || {}\n\n      return this.whenConnected(function () {\n        var command = options.insert\n          ? self.driver.insert(query, params, options)\n          : self.driver.query(query, params, options)\n\n        return command.then(function (results) {\n          self.logResults(query, params, results, options);\n          return results;\n        }, function (e) {\n          self.logError(query, params, e);\n          throw e;\n        });\n      });\n    },\n\n    statement: function(query, params, options) {\n      options = _.extend({statement: true}, options);\n      return this.query(query, params, options);\n    },\n\n    whenConnected: function(fn) {\n      if (this.runningBeginSession) {\n        return fn();\n      } else {\n        return this.connect().then(fn);\n      }\n    },\n\n    logError: function(query, params, error) {\n      debug(query, params, error);\n    },\n\n    logResults: function(query, params, results, options) {\n      if (typeof this.log == 'function') {\n        return this.log(query, params, results, options);\n      } else {\n        if (params) {\n          debug(query, params);\n        } else {\n          debug(query);\n        }\n\n        if (options.insert) {\n          return debugResults('id = ' + results.id);\n        } else if (options.statement) {\n          return debugResults('rows affected = ' + results.changes);\n        } else if (!options.statement && results) {\n          return debugResults(results);\n        }\n      }\n    },\n\n    ensureConfigured: function() {\n      if (!this.config) {\n        throw new Error('sworm has not been configured to a database, use db.connect(config) or sworm.db(config)');\n      }\n    },\n\n    connected: false,\n\n    connect: function (config, fn) {\n      if (typeof config === 'function') {\n        fn = config;\n        config = undefined;\n      }\n      if (config) {\n        this.config = config;\n      }\n      if (typeof this.config == 'string') {\n        this.config = configFromUrl(this.config)\n      }\n\n      var self = this;\n\n      if (this.connection) {\n        return this.connection;\n      }\n\n      this.ensureConfigured();\n\n      debug('connecting to', redactConfig(this.config));\n\n      var driver = {\n          mssql: mssqlDriver,\n          pg: pgDriver,\n          mysql: mysqlDriver,\n          oracle: oracleDriver,\n          sqlite: sqliteDriver,\n          websql: websqlDriver\n      }[this.config.driver];\n\n      if (!driver) {\n          throw new Error(\"no such driver: `\" + this.config.driver + \"'\");\n      }\n\n      this.driver = driver();\n\n      this.connection = this.driver.connect(this.config).then(function () {\n        debug('connected to', redactConfig(self.config));\n        self.connected = true;\n\n        if (self.config.setupSession) {\n          self.runningBeginSession = true;\n          return Promise.resolve(self.config.setupSession(self)).then(function (result) {\n            self.runningBeginSession = false;\n            return result;\n          }, function (error) {\n            self.runningBeginSession = false;\n            throw error;\n          });\n        }\n      });\n\n      if (!fn) {\n        return this.connection;\n      } else {\n        return this.connection.then(function () {\n          return fn();\n        }).then(function (result) {\n          return self.close().then(function () {\n            return result;\n          });\n        }, function (error) {\n          return self.close().then(function () {\n            throw error;\n          });\n        });\n      }\n    },\n\n    transaction: function (options, fn) {\n      var self = this;\n\n      if (typeof options === 'function') {\n        fn = options;\n        options = undefined;\n      }\n\n      return this.begin(options).then(function() {\n        return fn();\n      }).then(function(r) {\n        return self.commit().then(function() { return r; });\n      }, function(e) {\n        return self.rollback().then(function() { throw e; });\n      });\n    },\n\n    begin: function (options) {\n      if (this.driver.begin) {\n        return this.driver.begin(options);\n      } else {\n        return this.statement('begin' + (options? ' ' + options: ''));\n      }\n    },\n\n    commit: function () {\n      if (this.driver.commit) {\n        return this.driver.commit();\n      } else {\n        return this.statement('commit');\n      }\n    },\n\n    rollback: function () {\n      if (this.driver.rollback) {\n        return this.driver.rollback();\n      } else {\n        return this.statement('rollback');\n      }\n    },\n\n    close: function() {\n      var self = this;\n\n      if (this.driver) {\n        return this.driver.close().then(function () {\n          self.connected = false;\n        });\n      } else {\n        return Promise.resolve();\n      }\n    }\n  };\n\n  return db;\n};\n\nexports.unescape = unescape\nexports.escape = function(value) {\n  if (typeof value == 'string') {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\"\n  } else {\n    return value\n  }\n}\n\nfunction configFromUrl(url) {\n  var isBrowser = typeof window !== 'undefined'\n\n  var parsedUrl = urlUtils.parse(url)\n  var protocol = parsedUrl.protocol? parsedUrl.protocol.replace(/:$/, ''): (isBrowser? 'websql': 'sqlite')\n  var driver = {\n    postgres: 'pg',\n    file: 'sqlite'\n  }[protocol] || protocol\n\n  return {\n    driver: driver,\n    url: url\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/mssqlDriver.js":"var promisify = require('./promisify');\nvar optionalRequire = require(\"./optionalRequire\");\nvar debug = require('debug')('sworm:mssql');\n\nmodule.exports = function() {\n  var sql = optionalRequire(\"mssql\");\n\n  return {\n    query: function(query, params, options) {\n      var request = new sql.Request(this.transaction || this.connection);\n\n      if (params) {\n        Object.keys(params).forEach(function (key) {\n          request.input(key, params[key]);\n        });\n      }\n\n      debug(query, params);\n      return request.query(query).then(function (result) {\n        if (options.statement || options.insert) {\n          var r = {}\n\n          if (options.statement) {\n            r.changes = request.rowsAffected\n          }\n\n          if (options.insert) {\n            r.id = result[0][options.id]\n          }\n\n          return r\n        } else {\n          return result\n        }\n      })\n    },\n\n    connect: function(config) {\n      var self = this;\n      self.connection = new sql.Connection(config.config);\n\n      return promisify(function(cb) {\n        return self.connection.connect(cb);\n      });\n    },\n\n    begin: function() {\n      this.transaction = this.connection.transaction();\n      debug('begin transaction');\n      return this.transaction.begin();\n    },\n\n    commit: function() {\n      var self = this;\n\n      debug('commit');\n      return this.transaction.commit().then(function() {\n        self.transaction = undefined;\n      });\n    },\n\n    rollback: function() {\n      var self = this;\n\n      debug('rollback');\n      return this.transaction.rollback().then(function() {\n        self.transaction = undefined;\n      });\n    },\n\n    insertEmpty: function(meta) {\n      return findInsert(meta).insertEmpty(meta)\n    },\n\n    insertStatement: function(meta, fields, values) {\n      return findInsert(meta).insertStatement(meta, fields, values)\n    },\n\n    insert: function(query, params, options) {\n      return this.query(query, params, options)\n    },\n\n    close: function() {\n      this.connection.close();\n      return Promise.resolve();\n    }\n  };\n};\n\nfunction findInsert(meta) {\n  var generatedId = (meta.hasOwnProperty('generatedId')? meta.generatedId: undefined) || 'scope_identity';\n\n  if (meta.compoundKey) {\n    return insertNoIdentity\n  } else if (generatedId == 'scope_identity') {\n    return insertScopeIdentity\n  } else if (generatedId == 'output') {\n    return insertOutputIdentity\n  } else {\n    throw new Error('expected generatedId to be either scope_identity or output, found: ' + generatedId)\n  }\n}\n\nvar insertScopeIdentity = {\n  insertEmpty: function(meta) {\n    return 'insert into ' + meta.table + ' default values; select scope_identity() as ' + meta.id;\n  },\n\n  insertStatement: function(meta, fields, values) {\n    return 'insert into ' + meta.table + ' (' + fields + ') values (' + values + '); select scope_identity() as ' + meta.id;\n  }\n}\n\nvar insertNoIdentity = {\n  insertEmpty: function(meta) {\n    return 'insert into ' + meta.table + ' default values'\n  },\n\n  insertStatement: function(meta, fields, values) {\n    return 'insert into ' + meta.table + ' (' + fields + ') values (' + values + ')';\n  }\n}\n\nvar insertOutputIdentity = {\n  insertEmpty: function(meta) {\n    return 'insert into ' + meta.table + ' output inserted.' + meta.id + ' default values'\n  },\n\n  insertStatement: function(meta, fields, values) {\n    return 'insert into ' + meta.table + ' (' + fields + ') output inserted.' + meta.id + ' values (' + values + ')';\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/promisify.js":"module.exports = function(fn) {\n  return new Promise(function(fulfill, reject) {\n    try {\n      fn(function(error, result) {\n        if (error) {\n          reject(error);\n        } else {\n          fulfill(result);\n        }\n      });\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/optionalRequire.js":"module.exports = function(name) {\n  try {\n    return require(name);\n  } catch (e) {\n    if (e.code === \"MODULE_NOT_FOUND\") {\n      throw new Error(name + \" driver not found, please install it with: npm install \" + name);\n    } else {\n      throw e;\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/pgDriver.js":"var promisify = require('./promisify');\nvar optionalRequire = require(\"./optionalRequire\");\nvar debug = require('debug')('sworm:pg');\nvar urlUtils = require('url');\nvar _ = require('underscore')\nvar paramRegex = require('./paramRegex')\n\nmodule.exports = function() {\n  var pg = optionalRequire(\"pg\");\n\n  return {\n    query: function(query, params, options) {\n      var self = this;\n      var paramList = [];\n\n      if (params) {\n        var paramIndexes = _.mapObject(params, function (value) {\n          paramList.push(value);\n          return paramList.length\n        })\n\n        query = query.replace(paramRegex, function(_, name) {\n          if (paramIndexes.hasOwnProperty(name)) {\n            return '$' + paramIndexes[name]\n          } else {\n            throw new Error('no such parameter @' + name);\n          }\n        });\n      }\n\n      return promisify(function(cb) {\n        debug(query, paramList);\n        return self.connection.query(query, paramList, cb);\n      }).then(function(result) {\n        if (options.statement || options.insert) {\n          var r = {}\n\n          if (options.statement) {\n            r.changes = result.rowCount\n          }\n\n          if (options.insert) {\n            r.id = result.rows[0][options.id]\n          }\n\n          return r\n        } else {\n          return result.rows;\n        }\n      });\n    },\n\n    insert: function(query, params, options) {\n      var id = options.id;\n\n      return this.query(query + ' returning ' + id, params, options)\n    },\n\n    connect: function(config) {\n      var self = this;\n      var options = connectionOptions(config);\n\n      if (options.pool) {\n        return new Promise(function(result, error) {\n          pg.connect(config.url || config.config, function(err, client, done) {\n            if (err) {\n              return error(err);\n            } else {\n              self.connection = client;\n              self.done = done;\n              return result();\n            }\n          });\n        });\n      } else {\n        self.connection = new pg.Client(config.url || config.config);\n        self.done = function () {\n          self.connection.end();\n        };\n        return promisify(function (cb) {\n          self.connection.connect(cb);\n        });\n      }\n    },\n\n    close: function() {\n      if (this.done) {\n        this.done();\n      }\n\n      return Promise.resolve();\n    }\n  };\n};\n\nfunction connectionOptions(config) {\n  if (config.url) {\n    return urlUtils.parse(config.url, true).query;\n  } else {\n    return config.config;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/paramRegex.js":"module.exports = /@([a-zA-Z_0-9]+)\\b/g\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/mysqlDriver.js":"var promisify = require('./promisify');\nvar optionalRequire = require(\"./optionalRequire\");\nvar debug = require('debug')('sworm:mysql');\nvar paramRegex = require('./paramRegex')\n\nmodule.exports = function() {\n  var mysql = optionalRequire(\"mysql\");\n\n  return {\n    query: function(query, params, options) {\n      var self = this;\n      var paramList = [];\n\n      if (params) {\n        query = query.replace(paramRegex, function(_, paramName) {\n          if (!params.hasOwnProperty(paramName)) {\n            throw new Error('no such parameter @' + paramName);\n          } else {\n            paramList.push(params[paramName]);\n          }\n          return '?';\n        });\n      }\n\n      return promisify(function(cb) {\n        debug(query, paramList);\n        return self.connection.query(query, paramList, cb)\n      }).then(function (result) {\n        if (options.insert || options.statement) {\n          return {\n            id: result.insertId,\n            changes: result.affectedRows + result.changedRows\n          }\n        } else {\n          return result\n        }\n      })\n    },\n\n    insert: function(query, params, options) {\n      return this.query(query, params, options)\n    },\n\n    connect: function(config) {\n      var self = this;\n\n      config.config.multipleStatements = true;\n      self.connection = mysql.createConnection(config.config);\n\n      return promisify(function(cb) {\n        return self.connection.connect(cb);\n      });\n    },\n\n    close: function() {\n      var self = this;\n      return promisify(function (cb) { self.connection.end(cb); });\n    },\n\n    insertEmpty: function(meta) {\n      return 'insert into ' + meta.table + ' () values ()';\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/oracleDriver.js":"var optionalRequire = require('./optionalRequire');\nvar promisify = require('./promisify');\nvar debug = require('debug')('sworm:oracle');\nvar swormDebug = require('debug')('sworm');\nvar _ = require('underscore');\nvar urlUtils = require('url');\nvar redactConfig = require('./redactConfig');\nvar outstandingQueries = require('./outstandingQueries');\nvar randomstring = require('randomstring');\nvar cooperative = require('cooperative')\n\nmodule.exports = function () {\n  var oracledb = optionalRequire('oracledb');\n\n\n  return {\n    outstandingQueries: outstandingQueries(),\n\n    query: function (query, params, options) {\n      var resultsPromise = this.execute(replaceParameters(query), params, _.extend({outFormat: oracledb.ARRAY}, options))\n\n      if (options.statement || options.insert) {\n        return resultsPromise.then(function (results) {\n          var r = {}\n\n          if (options.statement) {\n            r.changes = results.rowsAffected\n          }\n\n          if (options.insert) {\n            r.id = results.outBinds.returning_into_id[0]\n          }\n\n          return r\n        })\n      } else {\n        return resultsPromise;\n      }\n    },\n\n    execute: function (query, params, options) {\n      var self = this;\n      debug(query, params);\n\n      var promise = options.statement || options.insert\n        ? promisify(function (cb) {\n          self.connection.execute(query, params || {}, options, cb)\n        })\n        : this.queryResultSet(query, params || {}, options)\n\n      return this.outstandingQueries.execute(promise);\n    },\n\n    queryResultSet: function(query, params, options) {\n      return this.connection.execute(query, params, _.extend(options, {resultSet: true})).then(function (results) {\n        var resultSet = results.resultSet\n        var numberOfRows = oracledb.maxRows || 100\n\n        function fetchRows(allRows) {\n          return resultSet.getRows(numberOfRows).then(function (rows) {\n            allRows.push(rows)\n\n            if (rows.length < numberOfRows) {\n              return resultSet.close().then(function () {\n                return allRows\n              })\n            } else {\n              return fetchRows(allRows)\n            }\n          })\n        }\n\n        return fetchRows([]).then(function (_rows) {\n          var rows = _.flatten(_rows, true)\n\n          if (options.formatRows === false) {\n            return rows\n          } else {\n            return formatRows(results.metaData, rows)\n          }\n        }, function (error) {\n          return resultSet.close().then(function () {\n            throw error\n          })\n        })\n      }, function (error) {\n        if (/NJS-019/.test(error.message)) {\n          throw new Error('oracle: you cannot pass an SQL statement to db.query(), please use db.statement()')\n        } else {\n          throw error\n        }\n      })\n    },\n\n    insert: function(query, params, options) {\n      var id = options.id;\n\n      return this.query(query + ' returning ' + id + ' into :returning_into_id', params, options)\n    },\n\n    generateTransactionName: function() {\n      return 't' + randomstring.generate();\n    },\n\n    begin: function(options) {\n      var transactionName = options && options.name || this.generateTransactionName();\n      return this.query(\"set transaction name '\" + transactionName + \"'\", undefined, {statement: true});\n    },\n\n    connect: function (swormConfig) {\n      var self = this;\n      var config = swormConfig.url? parseUrl(swormConfig.url): swormConfig.config;\n\n      oracledb.autoCommit = true;\n\n      if (config.options) {\n        Object.keys(config.options).forEach(function (key) {\n          oracledb[key] = config.options[key];\n        });\n      }\n\n      function makeConnection() {\n        if (config.pool === true) {\n          return connectionPool(oracledb, config, swormConfig).then(function (pool) {\n            return promisify(function (cb) { pool.getConnection(cb); });\n          });\n        } else if (config.pool) {\n          return promisify(function (cb) { config.pool.getConnection(cb); });\n        } else {\n          return promisify(function (cb) { oracledb.getConnection(config, cb); });\n        }\n      }\n\n      return makeConnection().then(function (connection) {\n        self.connection = connection;\n      });\n    },\n\n    close: function () {\n      var self = this;\n      if (self.connection) {\n        return this.outstandingQueries.whenNotExecuting(function () {\n          return promisify(function (cb) {\n            self.connection.release(cb);\n          });\n        });\n      } else {\n        return Promise.resolve();\n      }\n    },\n\n    insertEmpty: function(meta) {\n      return 'insert into ' + meta.table + ' (' + meta.id + ') values (default)';\n    },\n\n    outputIdKeys: function (idType) {\n      return {\n        returning_into_id: { type: idType || oracledb.NUMBER, dir: oracledb.BIND_OUT }\n      };\n    }\n  };\n};\n\nfunction formatRows(metadata, rows) {\n  var fields = metadata.map(function (field) {\n    if (/[a-z]/.test(field.name)) {\n      return field.name;\n    } else {\n      return field.name.toLowerCase();\n    }\n  });\n\n  if (fields.length > 0) {\n    var length = rows.length;\n    var results = new Array(length);\n\n    return cooperative.forEach(rows, function(row, index) {\n      var formattedRow = {};\n      results[index] = formattedRow;\n      for (var f = 0; f < fields.length; f++) {\n        formattedRow[fields[f]] = row[f];\n      }\n    }).then(function () {\n      return results\n    })\n  } else {\n    return Promise.resolve(rows);\n  }\n}\n\nfunction replaceParameters(query) {\n  return query.replace(/@([a-z_0-9]+)\\b/gi, function (_, paramName) {\n    return ':' + paramName;\n  });\n}\n\nfunction parseValue(value) {\n  var number = Number(value);\n  if (!isNaN(number)) {\n    return number;\n  }\n  \n  if (value == 'true' || value == 'false') {\n    return value == 'true';\n  }\n\n  return value;\n}\n\nfunction parseOptions(options) {\n  var result = {};\n\n  Object.keys(options).forEach(function (key) {\n    result[key] = parseValue(options[key]);\n  });\n\n  return result;\n}\n\nfunction parseUrl(url) {\n  var u = urlUtils.parse(url, true);\n  var auth = u.auth? u.auth.split(':'): [];\n\n  var options = parseOptions(u.query);\n\n  var pool = options.pool;\n  delete options.pool;\n\n  return {\n    user: auth[0],\n    password: auth[1],\n    connectString: u.host + u.pathname,\n    pool: pool,\n    options: options\n  };\n}\n\nvar connectionPoolCache = {};\n\nmodule.exports.connectionPoolCache = connectionPoolCache;\n\nfunction connectionPool(oracledb, config, swormConfig) {\n  var key = JSON.stringify(config);\n\n  var value = connectionPoolCache[key];\n\n  if (!value) {\n    value = connectionPoolCache[key] = promisify(function (cb) {\n      swormDebug('creating connection pool', redactConfig(swormConfig));\n      oracledb.createPool(config, cb);\n    });\n  }\n\n  return value;\n}\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/redactConfig.js":"var redactUrl = require('./redactUrl');\n\nmodule.exports = function(config) {\n  var copy = JSON.parse(JSON.stringify(config));\n  if (copy.url) {\n    copy.url = redactUrl(copy.url, '********');\n  }\n\n  if (copy.config && copy.config.password) {\n    copy.config.password = '********';\n  }\n\n  return copy;\n};\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/redactUrl.js":"var urlUtils = require('url');\n\nmodule.exports = function(url, replacement) {\n  var urlComponents = urlUtils.parse(url);\n  if (urlComponents.auth) {\n    urlComponents.auth = urlComponents.auth.replace(/:.*/, ':' + replacement);\n\n    return urlUtils.format(urlComponents);\n  } else {\n    return url;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/outstandingQueries.js":"/**\n * this is a curious class\n *\n * Imagine this scenario:\n *\n * 1. we open a db connection.\n * 2. run two simultaneous queries against it, i.e. Promise.all([query1(), query2()])\n * 3. the first query breaks, due to an SQL exception\n * 4. We log the error and close the database immediately\n * 5. however, query2 is still executing and prevents the database connection from being closed\n * 6. the connection is now in a broken state, it cannot be used, but remains in the conneciton pool\n *\n * this class ensures that we don't close the connection until all queries have finished\n */\nvar promiseFinally = require('./promiseFinally');\n\nmodule.exports = function() {\n  return {\n    queries: 0,\n\n    execute: function(p) {\n      var self = this;\n\n      this.queries++;\n      return promiseFinally(p, function () {\n        self.queries--;\n        if (self.queries === 0 && self._whenFinished) {\n          self._whenFinished();\n        }\n      });\n    },\n\n    whenNotExecuting: function(wf) {\n      var self = this;\n\n      return new Promise(function (resolve) {\n        if (self.queries == 0) {\n          resolve(wf());\n        } else {\n          self._whenFinished = function() {\n            resolve(wf());\n          };\n        }\n      });\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/promiseFinally.js":"module.exports = function(value, cb) {\n  return value.then(\n    function (value) { return Promise.resolve(cb()).then(function () { return value; }); },\n    function (reason) { return Promise.resolve(cb()).then(function() { return Promise.reject(reason); }); }\n  )\n}\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/sqliteDriver.js":"var promisify = require('./promisify');\nvar optionalRequire = require(\"./optionalRequire\");\nvar debug = require('debug')('sworm:sqlite');\nvar urlUtils = require('url')\n\nmodule.exports = function() {\n  var sqlite = optionalRequire('sqlite3');\n\n  return {\n    query: function(query, params, options) {\n      var self = this;\n      var sqliteParams = {};\n\n      if (params) {\n        Object.keys(params).forEach(function (key) {\n          sqliteParams['@' + key] = params[key];\n        });\n      }\n\n      if (options.statement || options.insert) {\n        return new Promise(function (fulfil, reject) {\n          debug(query, sqliteParams);\n          self.connection.run(query, sqliteParams, function (error) {\n            if (error) {\n              reject(error);\n            } else {\n              fulfil({id: this.lastID, changes: this.changes});\n            }\n          });\n        });\n      } else if (options.exec || options.multiline) {\n        return promisify(function (cb) {\n          debug(query, sqliteParams);\n          self.connection.exec(query, cb);\n        });\n      } else {\n        return promisify(function (cb) {\n          debug(query, sqliteParams);\n          self.connection.all(query, sqliteParams, cb);\n        });\n      }\n    },\n\n    insert: function(query, params, options) {\n      return this.query(query, params, options)\n    },\n\n    connect: function(options) {\n      var self = this;\n      var config = parseConfig(options)\n\n      return promisify(function(cb) {\n        if (options.mode) {\n          self.connection = new sqlite.Database(config.filename, config.mode, cb);\n        } else {\n          self.connection = new sqlite.Database(config.filename, cb);\n        }\n      });\n    },\n\n    close: function() {\n      var self = this;\n      return promisify(function (cb) {\n        return self.connection.close(cb);\n      });\n    }\n  };\n};\n\nfunction parseConfig(options) {\n  if (options.url) {\n    var url = urlUtils.parse(options.url)\n\n    if (url.protocol) {\n      return {\n        filename: url.pathname\n      }\n    } else {\n      return {\n        filename: options.url\n      }\n    }\n  } else {\n    return options.config\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/websqlDriver.js":"var debug = require('debug')('sworm:websql');\nvar paramRegex = require('./paramRegex')\nvar urlUtils = require('url')\n\nmodule.exports = function() {\n  return {\n    query: function(query, params, options) {\n      var self = this;\n      var paramList = []\n\n      if (params) {\n        query = query.replace(paramRegex, function(_, paramName) {\n          if (!params.hasOwnProperty(paramName)) {\n            throw new Error('no such parameter @' + paramName);\n          } else {\n            paramList.push(params[paramName]);\n          }\n          return '?';\n        });\n      }\n\n      return new Promise(function (fulfil, reject) {\n        debug(query, paramList);\n        self.connection.transaction(function(tx) {\n          tx.executeSql(query, paramList, function(tx, result){\n            if (options.statement || options.insert) {\n              var r = {}\n\n              if (options.statement) {\n                r.changes = result.rowsAffected\n              }\n\n              if (options.insert) {\n                r.id = result.insertId\n              }\n\n              fulfil(r)\n            } else {\n              var results = []\n              for (var i = 0; i<result.rows.length; i++) {\n                results.push(result.rows.item(i))\n              }\n              fulfil(results)\n            }\n          }, function(tx, error){\n            reject(error)\n          });\n        });\n      });\n    },\n\n    insert: function(query, params, options) {\n      return this.query(query, params, options)\n    },\n\n    connect: function(options) {\n      var openDatabase = (options.config && options.config.openDatabase) || window.openDatabase\n      var config = parseConfig(options)\n      var defaultSize = 5 * 1024 * 1024;\n      this.connection = openDatabase(config.name, '1.0', config.description, config.size || defaultSize)\n\n      return Promise.resolve()\n    },\n\n    close: function() {\n      return Promise.resolve()\n    },\n\n    noTransactions: function () {\n      throw new Error('transactions are not supported with websql')\n    },\n\n    begin: function () {\n      this.noTransactions()\n    },\n\n    commit: function () {\n      this.noTransactions()\n    },\n\n    rollback: function () {\n      this.noTransactions()\n    }\n  };\n};\n\nfunction parseConfig(options) {\n  if (options.url) {\n    var url = urlUtils.parse(options.url)\n\n    if (url.protocol) {\n      return {\n        name: url.pathname.replace(/^\\//, '')\n      }\n    } else {\n      return {\n        name: options.url\n      }\n    }\n  } else {\n    return options.config\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sworm/node_modules/sworm/unescape.js":"var paramRegex = require('./paramRegex')\nvar _ = require('underscore')\n\nfunction Unescape(value) {\n  this.value = value\n}\n\nmodule.exports = unescape\n\nfunction unescape(value) {\n  return new Unescape(value)\n}\n\nunescape.isUnescape = function (value) {\n  return value instanceof Unescape\n}\n\nunescape.interpolate = function(query, params) {\n  var driverParams = _.omit(params, function (value) {\n    return unescape.isUnescape(value)\n  })\n\n  var interpolatedQuery = query.replace(paramRegex, function(_, name) {\n    if (params.hasOwnProperty(name)) {\n      var value = params[name]\n      if (unescape.isUnescape(value)) {\n        delete driverParams[name]\n        return value.value\n      } else {\n        return _\n      }\n    } else {\n      return _\n    }\n  })\n\n  return {\n    query: interpolatedQuery,\n    params: driverParams\n  }\n}\n"}